mapa
package com.kony.banking200.postprocessors;

import java.util.ArrayList;
import java.util.Map;

import org.apache.log4j.Logger;

import com.kony.banking200.util.BankingProcessorUtilities;
import com.konylabs.middleware.common.DataPostProcessor;
import com.konylabs.middleware.controller.DataControllerRequest;
import com.konylabs.middleware.dataobject.Dataset;
import com.konylabs.middleware.dataobject.Param;
import com.konylabs.middleware.dataobject.Record;
import com.konylabs.middleware.dataobject.Result;
import com.konylabs.middleware.session.Session;

public class GetCurrentLocationPostProcessor implements DataPostProcessor {

	private static final Logger LOG = Logger
			.getLogger(GetCurrentLocationPostProcessor.class);

	@Override
	public Object execute(Result result, DataControllerRequest request)
			throws Exception {
		// TODO Auto-generated method stub
		try {
			Session session = request.getSession(false);
			String instance = request.getParameter("instance");
			String locale = request.getParameter("locale");
			String channel = request.getParameter("deviceChannel");
			String searchString = request.getParameter("filtro").toString()
					.trim();

			Map<String, String> maskingRelatedPreferences = BankingProcessorUtilities
					.getPreferenceValues(instance, locale, channel);
			int currentLocationResultsPaginationSize = Integer
					.parseInt(maskingRelatedPreferences
							.get("preference.common.ATMLocatorListView.SearchResultsPaginationSize.ValueVA"));

			Dataset finalDataset = new Dataset();
			ArrayList<Dataset> ds = result.getDataSets();

			for (Dataset dataset1 : ds) {
				ArrayList<Record> records = dataset1.getRecords();
				for (Record record : records) {
					ArrayList<Param> params = record.getParams();
					boolean addToResultTable = false;
					for (Param param : params) {
						if (param.getName().equals("pCanal")) {
							if (searchString.equalsIgnoreCase("ALL")) {
								addToResultTable = true;
							} else if ((searchString
									.equalsIgnoreCase("AGENCIA"))
									&& (param.getValue().trim()
											.equalsIgnoreCase("1"))) {
								addToResultTable = true;
							} else if ((searchString.equalsIgnoreCase("ATM"))
									&& (param.getValue().trim()
											.equalsIgnoreCase("7"))) {
								addToResultTable = true;
							}
						}
					}
					if (addToResultTable) {
						finalDataset.setRecord(record);
					}
				}
			}

			ArrayList dataSetList = result.getDataSets();
			dataSetList.removeAll(dataSetList);
			result.setDataSets(dataSetList);
			
			session.setAttribute("currentLocationResultsPaginationData",finalDataset);

			ArrayList<Record> currentLocationResultsArray = finalDataset.getRecords();
			ArrayList<Param> paramList = result.getParamList();
			Param totalNoOfCurrentLocationSearchResultsPages = new Param();
			totalNoOfCurrentLocationSearchResultsPages.setName("totalNumberOfATMLocatorPages");
			int noOfPages;
			if ((currentLocationResultsArray.size() % currentLocationResultsPaginationSize) == 0) {
				noOfPages = (currentLocationResultsArray.size() / currentLocationResultsPaginationSize);
			} else {
				noOfPages = (currentLocationResultsArray.size() / currentLocationResultsPaginationSize) + 1;
			}
			totalNoOfCurrentLocationSearchResultsPages.setValue(noOfPages + "");
			paramList.add(totalNoOfCurrentLocationSearchResultsPages);
			Param paginationSize = new Param();
			paginationSize.setName("paginationSize");
			paginationSize.setValue(currentLocationResultsPaginationSize + "");
			paramList.add(paginationSize);

			session.setAttribute("currentLocationResultsTotalRecords",
					currentLocationResultsArray.size());
			session.setAttribute("currentLocationResultsMaxRecordsPerPage",
					currentLocationResultsPaginationSize);
			session.setAttribute("currentLocationResultsMaxRecordsAllowed",
					currentLocationResultsArray.size());

			Dataset atmResults = new Dataset("resultSet");
			if (currentLocationResultsArray != null && currentLocationResultsArray.size() > 0) {
				int counter = 0;
				if (currentLocationResultsArray.size() < currentLocationResultsPaginationSize)
					counter = currentLocationResultsArray.size();
				else {
					counter = currentLocationResultsPaginationSize;
				}
				for (int i = 0; i < counter; i++) {
					atmResults.setRecord((Record) currentLocationResultsArray.get(i));
				}
				atmResults.setId("resultSet");
				result.setDataSet(atmResults);
			}
			
			return result;
			
		} catch (Exception e) {
			// LOG.info("Final Results :  " + results.toString());
			Param errorCode = new Param();
			errorCode.setName("errorCode");
			errorCode.setValue("205");
			result.setParam(errorCode);
			return BankingProcessorUtilities.getErrorMessageAndAction(result,
					request);
		}
	}

}
